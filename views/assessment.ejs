<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analysis Type Assessment</title>
    <link rel="stylesheet" href="./styles/styles.css">

    <!-- font awesome icons -->

    <script src="https://kit.fontawesome.com/84bf206d2c.js" crossorigin="anonymous"></script>
</head>

<body>
    <%- include ('header.ejs') %>
        <main class="assessment-container">
            <div class="wrapper">
                <h1 class="assessment-title">Analysis Assessment</h1>
                <form class="assessment-form" action="/submitAssessment" method="POST" id="assessmentForm">
                    <div class="question-container">
                        <% for (let i=0; i < questions.length; i++) { %>
                            <div class="question <%= i === 0 ? '' : 'hidden' %>">
                                <p>
                                    <%= questions[i].text %>
                                </p>
                                <% for (const option of questions[i].options) { %>
                                    <div class="input-container">
                                        <label>
                                            <input type="radio" , name="<%= questions[i]._id %>"
                                                value="<%= option.points %>">
                                            <%= option.text %>
                                        </label>
                                    </div>
                                    <% } %>
                            </div>
                            <% } %>
                    </div>
                    <div class="button-container">
                        <button class="general-button-styling" type="button" id="prevButton" disabled><i
                                class="fa-solid fa-arrow-left" style="color: #000000;"></i></button>
                        <button class="general-button-styling" type="button" id="nextButton"><i
                                class="fa-solid fa-arrow-right" style="color: #000000;"></i></button>
                        
                        <button class="general-button-styling" type="submit" id="submitButton"
                            class="hidden">Submit</button>
                    </div>
                    <div class="error-message" id="questionError">Please select an option before moving to the next question.</div>
                    <div class="error-message" id="submissionError">Please answer all questions before submitting.</div>
                </form>
            </div>
        </main>
        <%- include ('footer.ejs') %>
            <script>
                const questions = document.querySelectorAll('.question');
                const prevButton = document.getElementById('prevButton');
                const nextButton = document.getElementById('nextButton');
                const submitButton = document.getElementById('submitButton');
                const questionError = document.getElementById('questionError');
                const submissionError = document.getElementById('submissionError');
                const assessmentForm = document.getElementById('assessmentForm');
                let currenQuestionIndex = 0;

                const updateButtonState = () => {
                    prevButton.disabled = currenQuestionIndex === 0;
                    nextButton.style.display = currenQuestionIndex === questions.length - 1 ? 'none' : 'block';
                    submitButton.style.display = currenQuestionIndex === questions.length - 1 ? 'block' : 'none';
                }

                const showQuestion = (index) => {
                    questions.forEach((question, i) => {
                        if (i === index) {
                            question.classList.remove('hidden');
                        } else {
                            question.classList.add('hidden');
                        }
                    });
                }

                const isQuestionAnswered = (index) => {
                    const selectedOption = questions[index].querySelector('input:checked');
                    return !!selectedOption;
                }

                prevButton.addEventListener('click', () => {
                    currenQuestionIndex--;
                    showQuestion(currenQuestionIndex);
                    updateButtonState();
                });

                nextButton.addEventListener('click', () => {
                    if (isQuestionAnswered(currenQuestionIndex)) {
                        currenQuestionIndex++;
                        showQuestion(currenQuestionIndex);
                        updateButtonState();
                        questionError.style.display = 'none';
                    } else {
                        questionError.style.display = 'block';
                        setTimeout(() => {
                            questionError.style.opacity = '0';
                            setTimeout(() => {
                                questionError.style.display = 'none'
                                questionError.style.opacity = '1';
                            }, 500)
                        }, 5000);
                        console.log('Please select an option before moving to the next question');
                    }
                });

                assessmentForm.addEventListener('submit', (e) => {
                    const questionsArray = Array.from(questions);
                    if (!questionsArray.every((question, index) => isQuestionAnswered(index))) {
                        e.preventDefault();
                        submissionError.style.display = 'block';
                        setTimeout(() => {
                            submissionError.style.opacity = '0';
                            setTimeout(() => {
                                submissionError.style.display = 'none'
                                submissionError.style.opacity = '1';
                            }, 500);
                        }, 5000); // Display error message for 5 seconds
                    }
                });

                updateButtonState();
                showQuestion(currenQuestionIndex);
            </script>
</body>

</html>